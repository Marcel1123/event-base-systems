/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package models;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)", date = "2021-06-07")
public class TPublicationAVG implements org.apache.thrift.TBase<TPublicationAVG, TPublicationAVG._Fields>, java.io.Serializable, Cloneable, Comparable<TPublicationAVG> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPublicationAVG");

  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TEMP_AVG_FIELD_DESC = new org.apache.thrift.protocol.TField("temp_avg", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField RAIN_AVG_FIELD_DESC = new org.apache.thrift.protocol.TField("rain_avg", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField WIND_AVG_FIELD_DESC = new org.apache.thrift.protocol.TField("wind_avg", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TPublicationAVGStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TPublicationAVGTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String city; // required
  public double temp_avg; // required
  public double rain_avg; // required
  public double wind_avg; // required
  public int count; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CITY((short)1, "city"),
    TEMP_AVG((short)2, "temp_avg"),
    RAIN_AVG((short)3, "rain_avg"),
    WIND_AVG((short)4, "wind_avg"),
    COUNT((short)5, "count");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CITY
          return CITY;
        case 2: // TEMP_AVG
          return TEMP_AVG;
        case 3: // RAIN_AVG
          return RAIN_AVG;
        case 4: // WIND_AVG
          return WIND_AVG;
        case 5: // COUNT
          return COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TEMP_AVG_ISSET_ID = 0;
  private static final int __RAIN_AVG_ISSET_ID = 1;
  private static final int __WIND_AVG_ISSET_ID = 2;
  private static final int __COUNT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEMP_AVG, new org.apache.thrift.meta_data.FieldMetaData("temp_avg", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RAIN_AVG, new org.apache.thrift.meta_data.FieldMetaData("rain_avg", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.WIND_AVG, new org.apache.thrift.meta_data.FieldMetaData("wind_avg", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPublicationAVG.class, metaDataMap);
  }

  public TPublicationAVG() {
  }

  public TPublicationAVG(
    java.lang.String city,
    double temp_avg,
    double rain_avg,
    double wind_avg,
    int count)
  {
    this();
    this.city = city;
    this.temp_avg = temp_avg;
    setTemp_avgIsSet(true);
    this.rain_avg = rain_avg;
    setRain_avgIsSet(true);
    this.wind_avg = wind_avg;
    setWind_avgIsSet(true);
    this.count = count;
    setCountIsSet(true);
  }

  public TPublicationAVG(
    PublicationAvg publicationAvg)
  {
    this();
    this.city = publicationAvg.getCity();
    this.temp_avg = publicationAvg.getTemp_avg();
    setTemp_avgIsSet(true);
    this.rain_avg = publicationAvg.getRain_avg();
    setRain_avgIsSet(true);
    this.wind_avg = publicationAvg.getWind_avg();
    setWind_avgIsSet(true);
    this.count = publicationAvg.getCount();
    setCountIsSet(true);
  }

  public void addPublication(@org.jetbrains.annotations.NotNull Publication publication)
  {
    if (publication.getCity().equals(this.city))
    {
      count +=1;
      this.temp_avg = (this.temp_avg + publication.getTemp())/count;
      this.rain_avg = (this.rain_avg + publication.getRain())/count;
      this.wind_avg = (this.wind_avg + publication.getWind())/count;
    }
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPublicationAVG(TPublicationAVG other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCity()) {
      this.city = other.city;
    }
    this.temp_avg = other.temp_avg;
    this.rain_avg = other.rain_avg;
    this.wind_avg = other.wind_avg;
    this.count = other.count;
  }

  public TPublicationAVG deepCopy() {
    return new TPublicationAVG(this);
  }

  @Override
  public void clear() {
    this.city = null;
    setTemp_avgIsSet(false);
    this.temp_avg = 0.0;
    setRain_avgIsSet(false);
    this.rain_avg = 0.0;
    setWind_avgIsSet(false);
    this.wind_avg = 0.0;
    setCountIsSet(false);
    this.count = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCity() {
    return this.city;
  }

  public TPublicationAVG setCity(@org.apache.thrift.annotation.Nullable java.lang.String city) {
    this.city = city;
    return this;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public double getTemp_avg() {
    return this.temp_avg;
  }

  public TPublicationAVG setTemp_avg(double temp_avg) {
    this.temp_avg = temp_avg;
    setTemp_avgIsSet(true);
    return this;
  }

  public void unsetTemp_avg() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TEMP_AVG_ISSET_ID);
  }

  /** Returns true if field temp_avg is set (has been assigned a value) and false otherwise */
  public boolean isSetTemp_avg() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TEMP_AVG_ISSET_ID);
  }

  public void setTemp_avgIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TEMP_AVG_ISSET_ID, value);
  }

  public double getRain_avg() {
    return this.rain_avg;
  }

  public TPublicationAVG setRain_avg(double rain_avg) {
    this.rain_avg = rain_avg;
    setRain_avgIsSet(true);
    return this;
  }

  public void unsetRain_avg() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RAIN_AVG_ISSET_ID);
  }

  /** Returns true if field rain_avg is set (has been assigned a value) and false otherwise */
  public boolean isSetRain_avg() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RAIN_AVG_ISSET_ID);
  }

  public void setRain_avgIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RAIN_AVG_ISSET_ID, value);
  }

  public double getWind_avg() {
    return this.wind_avg;
  }

  public TPublicationAVG setWind_avg(double wind_avg) {
    this.wind_avg = wind_avg;
    setWind_avgIsSet(true);
    return this;
  }

  public void unsetWind_avg() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WIND_AVG_ISSET_ID);
  }

  /** Returns true if field wind_avg is set (has been assigned a value) and false otherwise */
  public boolean isSetWind_avg() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WIND_AVG_ISSET_ID);
  }

  public void setWind_avgIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WIND_AVG_ISSET_ID, value);
  }

  public int getCount() {
    return this.count;
  }

  public TPublicationAVG setCount(int count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((java.lang.String)value);
      }
      break;

    case TEMP_AVG:
      if (value == null) {
        unsetTemp_avg();
      } else {
        setTemp_avg((java.lang.Double)value);
      }
      break;

    case RAIN_AVG:
      if (value == null) {
        unsetRain_avg();
      } else {
        setRain_avg((java.lang.Double)value);
      }
      break;

    case WIND_AVG:
      if (value == null) {
        unsetWind_avg();
      } else {
        setWind_avg((java.lang.Double)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CITY:
      return getCity();

    case TEMP_AVG:
      return getTemp_avg();

    case RAIN_AVG:
      return getRain_avg();

    case WIND_AVG:
      return getWind_avg();

    case COUNT:
      return getCount();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CITY:
      return isSetCity();
    case TEMP_AVG:
      return isSetTemp_avg();
    case RAIN_AVG:
      return isSetRain_avg();
    case WIND_AVG:
      return isSetWind_avg();
    case COUNT:
      return isSetCount();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TPublicationAVG)
      return this.equals((TPublicationAVG)that);
    return false;
  }

  public boolean equals(TPublicationAVG that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_temp_avg = true;
    boolean that_present_temp_avg = true;
    if (this_present_temp_avg || that_present_temp_avg) {
      if (!(this_present_temp_avg && that_present_temp_avg))
        return false;
      if (this.temp_avg != that.temp_avg)
        return false;
    }

    boolean this_present_rain_avg = true;
    boolean that_present_rain_avg = true;
    if (this_present_rain_avg || that_present_rain_avg) {
      if (!(this_present_rain_avg && that_present_rain_avg))
        return false;
      if (this.rain_avg != that.rain_avg)
        return false;
    }

    boolean this_present_wind_avg = true;
    boolean that_present_wind_avg = true;
    if (this_present_wind_avg || that_present_wind_avg) {
      if (!(this_present_wind_avg && that_present_wind_avg))
        return false;
      if (this.wind_avg != that.wind_avg)
        return false;
    }

    boolean this_present_count = true;
    boolean that_present_count = true;
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCity()) ? 131071 : 524287);
    if (isSetCity())
      hashCode = hashCode * 8191 + city.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(temp_avg);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rain_avg);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(wind_avg);

    hashCode = hashCode * 8191 + count;

    return hashCode;
  }

  @Override
  public int compareTo(TPublicationAVG other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetCity(), other.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTemp_avg(), other.isSetTemp_avg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemp_avg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.temp_avg, other.temp_avg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRain_avg(), other.isSetRain_avg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRain_avg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rain_avg, other.rain_avg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetWind_avg(), other.isSetWind_avg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWind_avg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wind_avg, other.wind_avg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCount(), other.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TPublicationAVG(");
    boolean first = true;

    sb.append("city:");
    if (this.city == null) {
      sb.append("null");
    } else {
      sb.append(this.city);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("temp_avg:");
    sb.append(this.temp_avg);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rain_avg:");
    sb.append(this.rain_avg);
    first = false;
    if (!first) sb.append(", ");
    sb.append("wind_avg:");
    sb.append(this.wind_avg);
    first = false;
    if (!first) sb.append(", ");
    sb.append("count:");
    sb.append(this.count);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (city == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'city' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'temp_avg' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'rain_avg' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'wind_avg' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'count' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPublicationAVGStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TPublicationAVGStandardScheme getScheme() {
      return new TPublicationAVGStandardScheme();
    }
  }

  private static class TPublicationAVGStandardScheme extends org.apache.thrift.scheme.StandardScheme<TPublicationAVG> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPublicationAVG struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TEMP_AVG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.temp_avg = iprot.readDouble();
              struct.setTemp_avgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RAIN_AVG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rain_avg = iprot.readDouble();
              struct.setRain_avgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // WIND_AVG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.wind_avg = iprot.readDouble();
              struct.setWind_avgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.count = iprot.readI32();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTemp_avg()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'temp_avg' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRain_avg()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'rain_avg' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetWind_avg()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'wind_avg' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'count' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPublicationAVG struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.city != null) {
        oprot.writeFieldBegin(CITY_FIELD_DESC);
        oprot.writeString(struct.city);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TEMP_AVG_FIELD_DESC);
      oprot.writeDouble(struct.temp_avg);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RAIN_AVG_FIELD_DESC);
      oprot.writeDouble(struct.rain_avg);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WIND_AVG_FIELD_DESC);
      oprot.writeDouble(struct.wind_avg);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COUNT_FIELD_DESC);
      oprot.writeI32(struct.count);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPublicationAVGTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TPublicationAVGTupleScheme getScheme() {
      return new TPublicationAVGTupleScheme();
    }
  }

  private static class TPublicationAVGTupleScheme extends org.apache.thrift.scheme.TupleScheme<TPublicationAVG> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPublicationAVG struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.city);
      oprot.writeDouble(struct.temp_avg);
      oprot.writeDouble(struct.rain_avg);
      oprot.writeDouble(struct.wind_avg);
      oprot.writeI32(struct.count);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPublicationAVG struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.city = iprot.readString();
      struct.setCityIsSet(true);
      struct.temp_avg = iprot.readDouble();
      struct.setTemp_avgIsSet(true);
      struct.rain_avg = iprot.readDouble();
      struct.setRain_avgIsSet(true);
      struct.wind_avg = iprot.readDouble();
      struct.setWind_avgIsSet(true);
      struct.count = iprot.readI32();
      struct.setCountIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

