/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package models;

import utils.Constant;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)", date = "2021-06-07")
public class TPublication implements org.apache.thrift.TBase<TPublication, TPublication._Fields>, java.io.Serializable, Cloneable, Comparable<TPublication> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPublication");

  private static final org.apache.thrift.protocol.TField STATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stationId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TEMP_FIELD_DESC = new org.apache.thrift.protocol.TField("temp", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField RAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("rain", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField WIND_FIELD_DESC = new org.apache.thrift.protocol.TField("wind", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("direction", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TPublicationStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TPublicationTupleSchemeFactory();

  public int stationId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String city; // required
  public int temp; // required
  public double rain; // required
  public int wind; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String direction; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String date; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATION_ID((short)1, "stationId"),
    CITY((short)2, "city"),
    TEMP((short)3, "temp"),
    RAIN((short)4, "rain"),
    WIND((short)5, "wind"),
    DIRECTION((short)6, "direction"),
    DATE((short)7, "date");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATION_ID
          return STATION_ID;
        case 2: // CITY
          return CITY;
        case 3: // TEMP
          return TEMP;
        case 4: // RAIN
          return RAIN;
        case 5: // WIND
          return WIND;
        case 6: // DIRECTION
          return DIRECTION;
        case 7: // DATE
          return DATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATIONID_ISSET_ID = 0;
  private static final int __TEMP_ISSET_ID = 1;
  private static final int __RAIN_ISSET_ID = 2;
  private static final int __WIND_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATION_ID, new org.apache.thrift.meta_data.FieldMetaData("stationId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEMP, new org.apache.thrift.meta_data.FieldMetaData("temp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.RAIN, new org.apache.thrift.meta_data.FieldMetaData("rain", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.WIND, new org.apache.thrift.meta_data.FieldMetaData("wind", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("direction", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPublication.class, metaDataMap);
  }

  public TPublication() {
  }

  public TPublication(
    int stationId,
    java.lang.String city,
    int temp,
    double rain,
    int wind,
    java.lang.String direction,
    java.lang.String date)
  {
    this();
    this.stationId = stationId;
    setStationIdIsSet(true);
    this.city = city;
    this.temp = temp;
    setTempIsSet(true);
    this.rain = rain;
    setRainIsSet(true);
    this.wind = wind;
    setWindIsSet(true);
    this.direction = direction;
    this.date = date;
  }

  public TPublication(
          Publication publication)
  {
    this();
    this.stationId = publication.getStationId();
    setStationIdIsSet(true);
    this.city = publication.getCity();
    this.temp = publication.getTemp();
    setTempIsSet(true);
    this.rain = publication.getRain();
    setRainIsSet(true);
    this.wind = publication.getWind();
    setWindIsSet(true);
    this.direction = publication.getDirection();
    this.date = String.valueOf(publication.getData().getTime());
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPublication(TPublication other) {
    __isset_bitfield = other.__isset_bitfield;
    this.stationId = other.stationId;
    if (other.isSetCity()) {
      this.city = other.city;
    }
    this.temp = other.temp;
    this.rain = other.rain;
    this.wind = other.wind;
    if (other.isSetDirection()) {
      this.direction = other.direction;
    }
    if (other.isSetDate()) {
      this.date = other.date;
    }
  }

  public TPublication deepCopy() {
    return new TPublication(this);
  }

  @Override
  public void clear() {
    setStationIdIsSet(false);
    this.stationId = 0;
    this.city = null;
    setTempIsSet(false);
    this.temp = 0;
    setRainIsSet(false);
    this.rain = 0.0;
    setWindIsSet(false);
    this.wind = 0;
    this.direction = null;
    this.date = null;
  }

  public int getStationId() {
    return this.stationId;
  }

  public TPublication setStationId(int stationId) {
    this.stationId = stationId;
    setStationIdIsSet(true);
    return this;
  }

  public void unsetStationId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATIONID_ISSET_ID);
  }

  /** Returns true if field stationId is set (has been assigned a value) and false otherwise */
  public boolean isSetStationId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATIONID_ISSET_ID);
  }

  public void setStationIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATIONID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCity() {
    return this.city;
  }

  public TPublication setCity(@org.apache.thrift.annotation.Nullable java.lang.String city) {
    this.city = city;
    return this;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public int getTemp() {
    return this.temp;
  }

  public TPublication setTemp(int temp) {
    this.temp = temp;
    setTempIsSet(true);
    return this;
  }

  public void unsetTemp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TEMP_ISSET_ID);
  }

  /** Returns true if field temp is set (has been assigned a value) and false otherwise */
  public boolean isSetTemp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TEMP_ISSET_ID);
  }

  public void setTempIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TEMP_ISSET_ID, value);
  }

  public double getRain() {
    return this.rain;
  }

  public TPublication setRain(double rain) {
    this.rain = rain;
    setRainIsSet(true);
    return this;
  }

  public void unsetRain() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RAIN_ISSET_ID);
  }

  /** Returns true if field rain is set (has been assigned a value) and false otherwise */
  public boolean isSetRain() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RAIN_ISSET_ID);
  }

  public void setRainIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RAIN_ISSET_ID, value);
  }

  public int getWind() {
    return this.wind;
  }

  public TPublication setWind(int wind) {
    this.wind = wind;
    setWindIsSet(true);
    return this;
  }

  public void unsetWind() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WIND_ISSET_ID);
  }

  /** Returns true if field wind is set (has been assigned a value) and false otherwise */
  public boolean isSetWind() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WIND_ISSET_ID);
  }

  public void setWindIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WIND_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDirection() {
    return this.direction;
  }

  public TPublication setDirection(@org.apache.thrift.annotation.Nullable java.lang.String direction) {
    this.direction = direction;
    return this;
  }

  public void unsetDirection() {
    this.direction = null;
  }

  /** Returns true if field direction is set (has been assigned a value) and false otherwise */
  public boolean isSetDirection() {
    return this.direction != null;
  }

  public void setDirectionIsSet(boolean value) {
    if (!value) {
      this.direction = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDate() {
    return this.date;
  }

  public TPublication setDate(@org.apache.thrift.annotation.Nullable java.lang.String date) {
    this.date = date;
    return this;
  }

  public void unsetDate() {
    this.date = null;
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return this.date != null;
  }

  public void setDateIsSet(boolean value) {
    if (!value) {
      this.date = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case STATION_ID:
      if (value == null) {
        unsetStationId();
      } else {
        setStationId((java.lang.Integer)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((java.lang.String)value);
      }
      break;

    case TEMP:
      if (value == null) {
        unsetTemp();
      } else {
        setTemp((java.lang.Integer)value);
      }
      break;

    case RAIN:
      if (value == null) {
        unsetRain();
      } else {
        setRain((java.lang.Double)value);
      }
      break;

    case WIND:
      if (value == null) {
        unsetWind();
      } else {
        setWind((java.lang.Integer)value);
      }
      break;

    case DIRECTION:
      if (value == null) {
        unsetDirection();
      } else {
        setDirection((java.lang.String)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STATION_ID:
      return getStationId();

    case CITY:
      return getCity();

    case TEMP:
      return getTemp();

    case RAIN:
      return getRain();

    case WIND:
      return getWind();

    case DIRECTION:
      return getDirection();

    case DATE:
      return getDate();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STATION_ID:
      return isSetStationId();
    case CITY:
      return isSetCity();
    case TEMP:
      return isSetTemp();
    case RAIN:
      return isSetRain();
    case WIND:
      return isSetWind();
    case DIRECTION:
      return isSetDirection();
    case DATE:
      return isSetDate();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TPublication)
      return this.equals((TPublication)that);
    return false;
  }

  public boolean equals(TPublication that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_stationId = true;
    boolean that_present_stationId = true;
    if (this_present_stationId || that_present_stationId) {
      if (!(this_present_stationId && that_present_stationId))
        return false;
      if (this.stationId != that.stationId)
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_temp = true;
    boolean that_present_temp = true;
    if (this_present_temp || that_present_temp) {
      if (!(this_present_temp && that_present_temp))
        return false;
      if (this.temp != that.temp)
        return false;
    }

    boolean this_present_rain = true;
    boolean that_present_rain = true;
    if (this_present_rain || that_present_rain) {
      if (!(this_present_rain && that_present_rain))
        return false;
      if (this.rain != that.rain)
        return false;
    }

    boolean this_present_wind = true;
    boolean that_present_wind = true;
    if (this_present_wind || that_present_wind) {
      if (!(this_present_wind && that_present_wind))
        return false;
      if (this.wind != that.wind)
        return false;
    }

    boolean this_present_direction = true && this.isSetDirection();
    boolean that_present_direction = true && that.isSetDirection();
    if (this_present_direction || that_present_direction) {
      if (!(this_present_direction && that_present_direction))
        return false;
      if (!this.direction.equals(that.direction))
        return false;
    }

    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (!this.date.equals(that.date))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + stationId;

    hashCode = hashCode * 8191 + ((isSetCity()) ? 131071 : 524287);
    if (isSetCity())
      hashCode = hashCode * 8191 + city.hashCode();

    hashCode = hashCode * 8191 + temp;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rain);

    hashCode = hashCode * 8191 + wind;

    hashCode = hashCode * 8191 + ((isSetDirection()) ? 131071 : 524287);
    if (isSetDirection())
      hashCode = hashCode * 8191 + direction.hashCode();

    hashCode = hashCode * 8191 + ((isSetDate()) ? 131071 : 524287);
    if (isSetDate())
      hashCode = hashCode * 8191 + date.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TPublication other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetStationId(), other.isSetStationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stationId, other.stationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCity(), other.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTemp(), other.isSetTemp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.temp, other.temp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRain(), other.isSetRain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rain, other.rain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetWind(), other.isSetWind());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWind()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wind, other.wind);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDirection(), other.isSetDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.direction, other.direction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDate(), other.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

//  @Override
//  public String toString() {
//    return "{" +
//            "("+ Constant.StationId +"," + stationId +
//            "),("+ Constant.City +",\"" + city + '\"' +
//            "),("+ Constant.Temp + "," + temp +
//            "),(" + Constant.Rain+ "," + rain +
//            "),("+Constant.Wind+"," + wind +
//            "),("+Constant.Direction+",\"" + direction + '\"' +
//            "),("+Constant.Data +"," + data +
//            ")}";
//  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TPublication(");
    boolean first = true;

    sb.append("stationId:");
    sb.append(this.stationId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("city:");
    if (this.city == null) {
      sb.append("null");
    } else {
      sb.append(this.city);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("temp:");
    sb.append(this.temp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rain:");
    sb.append(this.rain);
    first = false;
    if (!first) sb.append(", ");
    sb.append("wind:");
    sb.append(this.wind);
    first = false;
    if (!first) sb.append(", ");
    sb.append("direction:");
    if (this.direction == null) {
      sb.append("null");
    } else {
      sb.append(this.direction);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("date:");
    if (this.date == null) {
      sb.append("null");
    } else {
      sb.append(this.date);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'stationId' because it's a primitive and you chose the non-beans generator.
    if (city == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'city' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'temp' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'rain' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'wind' because it's a primitive and you chose the non-beans generator.
    if (direction == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'direction' was not present! Struct: " + toString());
    }
    if (date == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'date' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPublicationStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TPublicationStandardScheme getScheme() {
      return new TPublicationStandardScheme();
    }
  }

  private static class TPublicationStandardScheme extends org.apache.thrift.scheme.StandardScheme<TPublication> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPublication struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stationId = iprot.readI32();
              struct.setStationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TEMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.temp = iprot.readI32();
              struct.setTempIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rain = iprot.readDouble();
              struct.setRainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // WIND
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wind = iprot.readI32();
              struct.setWindIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.direction = iprot.readString();
              struct.setDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.date = iprot.readString();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetStationId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'stationId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTemp()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'temp' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRain()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'rain' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetWind()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'wind' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPublication struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(STATION_ID_FIELD_DESC);
      oprot.writeI32(struct.stationId);
      oprot.writeFieldEnd();
      if (struct.city != null) {
        oprot.writeFieldBegin(CITY_FIELD_DESC);
        oprot.writeString(struct.city);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TEMP_FIELD_DESC);
      oprot.writeI32(struct.temp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RAIN_FIELD_DESC);
      oprot.writeDouble(struct.rain);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WIND_FIELD_DESC);
      oprot.writeI32(struct.wind);
      oprot.writeFieldEnd();
      if (struct.direction != null) {
        oprot.writeFieldBegin(DIRECTION_FIELD_DESC);
        oprot.writeString(struct.direction);
        oprot.writeFieldEnd();
      }
      if (struct.date != null) {
        oprot.writeFieldBegin(DATE_FIELD_DESC);
        oprot.writeString(struct.date);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPublicationTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TPublicationTupleScheme getScheme() {
      return new TPublicationTupleScheme();
    }
  }

  private static class TPublicationTupleScheme extends org.apache.thrift.scheme.TupleScheme<TPublication> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPublication struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.stationId);
      oprot.writeString(struct.city);
      oprot.writeI32(struct.temp);
      oprot.writeDouble(struct.rain);
      oprot.writeI32(struct.wind);
      oprot.writeString(struct.direction);
      oprot.writeString(struct.date);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPublication struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.stationId = iprot.readI32();
      struct.setStationIdIsSet(true);
      struct.city = iprot.readString();
      struct.setCityIsSet(true);
      struct.temp = iprot.readI32();
      struct.setTempIsSet(true);
      struct.rain = iprot.readDouble();
      struct.setRainIsSet(true);
      struct.wind = iprot.readI32();
      struct.setWindIsSet(true);
      struct.direction = iprot.readString();
      struct.setDirectionIsSet(true);
      struct.date = iprot.readString();
      struct.setDateIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

